@model IEnumerable<AgriInvestment.Core.Models.InvestmentProduct>

@{
    ViewBag.Title = "Investment Product Setup";
}

<h4>@ViewBag.Title.</h4>
<h4>@ViewBag.Message</h4>

<script src="@Url.Content("~/Scripts/cultures/kendo.culture.en-GB.min.js")"></script>
<script type="text/javascript">
    kendo.culture("en-GB");

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function synch_handler(e) {
        this.read();
    }

    function onSuccess(e) {
        //alert('here');
        if (e.operation == "upload") {
            for (var i = 0; i < e.files.length; i++) {
                var file = e.files[i].rawFile;

                if (file) {
                    var reader = new FileReader();
                    
                    reader.onloadend = function () {
                        //alert('inside');
                        $("#productPhoto").css('background-image', this.result);
                        //alert(file);
                    };

                    reader.readAsDataURL(file);
                }
            }
        }
    }
</script>

@(Html.Kendo().Grid<AgriInvestment.Core.ViewModels.InvestmentProductManagerViewModel>()
    .Name("grdInvestmentProducts")
    .Columns(columns =>
    {
        //columns.Bound(p => p.Id).Width(40);

        columns.Bound(p => p.Name)
        .ClientTemplate(
            @"<div class='product-photo' 
                    style='background-image: url(" + @Url.Content("~/Images/Products/#:ImageFile#") + ");'></div><div class='product-name'>#: Name #</div>")
          .Width(350);

        columns.Bound(p => p.Description).Width(350);
        //columns.Bound(p => p.ProductCategoryId).ClientTemplate("#=InvestmentCategory.Name#").Width(150);
        columns.Bound(p => p.ProductCategoryName).Width(200);
        columns.Bound(p => p.InvestmentPeriod).Width(120);
        //columns.Bound(p => p.InvestmentsCount).Width(60);
        columns.Command(command => { command.Edit().Text(" "); command.Destroy().Text(" "); }).Width(160);
    })
    .ToolBar(toolbar => toolbar.Create().Text("Add Investment Product"))
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Template_InvestmentProduct"))
    .Pageable()
    .Sortable()
    .Scrollable()
    .Filterable()
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Events(events => events
            .Error("error_handler")
            .Sync("synch_handler")
        )
        .Model(model => model.Id(p => p.Id))
        .Create(update => update.Action("EditingInvestmentProductPopup_Create", "InvestmentProduct"))
        .Read(read => read.Action("EditingInvestmentProductPopup_Read", "InvestmentProduct"))
        .Update(update => update.Action("EditingInvestmentProductPopup_Update", "InvestmentProduct"))
        .Destroy(update => update.Action("EditingInvestmentProductPopup_Destroy", "InvestmentProduct"))
    )
)

<style>
    .product-photo {
        display: inline-block;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-size: 32px 35px;
        background-position: center center;
        vertical-align: middle;
        line-height: 32px;
        box-shadow: inset 0 0 1px #999, inset 0 0 10px rgba(0,0,0,.2);
        margin-left: 5px;
    }

    .product-name {
        display: inline-block;
        vertical-align: middle;
        line-height: 32px;
        padding-left: 10px;
    }
</style>