
@{
    ViewBag.Title = "Product Setup";
}

<script src="@Url.Content("~/Scripts/kendo.culture.en-GB.min.js")"></script>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

</script>

@(Html.Kendo().TabStrip()
    .Name("setup")

    .Animation(animation =>
        animation.Open(effect =>{
            effect.Fade(FadeDirection.In);
            effect.SlideIn(SlideDirection.Right);
        })
    )
    .TabPosition(TabStripTabPosition.Left)
    .SelectedIndex(0)
    .Items(tabstrip =>
    {
        //PRODUCT CATEGORIES
        tabstrip.Add().Text("Product Categories")
            .Content(@<text>

                    @(Html.Kendo().Grid<Jilipe.Core.ViewModels.ProductCategoryManagerViewModel>()
                        .Name("grdProductCategories")
                        .Columns(columns =>
                        {
                            //columns.Bound(p => p.Id).Width(40);
                            columns.Bound(p => p.Name).Width(150);
                            columns.Bound(p => p.Description).Width(290);
                            //columns.Bound(p => p.ProductsCount).Width(70);
                            columns.Command(command => { command.Edit().Text(" "); command.Destroy().Text(" "); }).Width(150);
                        })
                        .ToolBar(toolbar => toolbar.Create())
                        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Template_ProductCategory"))
                        .Pageable()
                        .Sortable()
                        .Scrollable()
                        .HtmlAttributes(new { style = "height:550px;" })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(10)
                            .Events(events => events
                                .Error("error_handler")
                            )
                            .Model(model => { model.Id(p => p.Id); })
                            .Create(update => update.Action("EditingProductCategoryPopup_Create", "ProductSetup"))
                            .Read(read => read.Action("EditingProductCategoryPopup_Read", "ProductSetup"))
                            .Update(update => update.Action("EditingProductCategoryPopup_Update", "ProductSetup"))
                            .Destroy(update => update.Action("EditingProductCategoryPopup_Destroy", "ProductSetup"))
                        )
                    )

                </text>);

        //PRODUCTS
        tabstrip.Add().Text("Products")
            .Content(@<text>

                @(Html.Kendo().Grid<AgriInvestment.Core.ViewModels.ProductManagerViewModel>()
                    .Name("grdProducts")
                    .Columns(columns =>
                    {
                        //columns.Bound(p => p.Id).Width(40);
                        columns.Bound(p => p.Name).Width(150);
                        columns.Bound(p => p.Description).Width(250);
                        columns.Bound(p => p.ProductCategoryName).Width(180);
                        columns.Bound(p => p.InvestmentPeriod).Width(80);
                        //columns.Bound(p => p.InvestmentsCount).Width(60);
                        columns.Command(command => { command.Edit().Text(" "); command.Destroy().Text(" "); }).Width(100);
                    })
                    .ToolBar(toolbar => toolbar.Create())
                    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Template_Product"))
                    .Pageable()
                    .Sortable()
                    .Scrollable()
                    .HtmlAttributes(new { style = "height:550px;" })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Events(events => events
                            .Error("error_handler")
                        )
                        .Model(model => model.Id(p => p.Id))
                        .Create(update => update.Action("EditingProductPopup_Create", "ProductSetup"))
                        .Read(read => read.Action("EditingProductPopup_Read", "ProductSetup"))
                        .Update(update => update.Action("EditingProductPopup_Update", "ProductSetup"))
                        .Destroy(update => update.Action("EditingProductPopup_Destroy", "ProductSetup"))
                    )
                )

            </text>);

        //INVESTEMENT CYCLES
        tabstrip.Add().Text("Investment Cycles")
            .Content(@<text>

                @(Html.Kendo().Grid<AgriInvestment.Core.ViewModels.InvestmentCycleManagerViewModel>()
                    .Name("grdInvestmentCycles")
                    .Columns(columns =>
                    {
                        //columns.Bound(p => p.Id).Width(40);
                        columns.Bound(p => p.FromDate).Width(130).Format("{0: dd-MMM-yyyy}");
                        columns.Bound(p => p.ProductName).Width(250);
                        columns.Bound(p => p.TargetAmount).Width(130);
                        columns.Bound(p => p.MinimumAmount).Width(130);
                        columns.Bound(p => p.MaximumAmount).Width(130);
                        columns.Command(command => { command.Edit().Text(" "); command.Destroy().Text(" "); }).Width(100);
                    })
                    .ToolBar(toolbar => toolbar.Create())
                    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Template_InvestmentCycle"))
                    .Pageable()
                    .Sortable()
                    .Scrollable()
                    .HtmlAttributes(new { style = "height:550px;" })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Events(events => events
                            .Error("error_handler")
                        )
                        .Model(model => model.Id(p => p.Id))
                        .Create(update => update.Action("EditingInvestmentCyclePopup_Create", "ProductSetup"))
                        .Read(read => read.Action("EditingInvestmentCyclePopup_Read", "ProductSetup"))
                        .Update(update => update.Action("EditingInvestmentCyclePopup_Update", "ProductSetup"))
                        .Destroy(update => update.Action("EditingInvestmentCyclePopup_Destroy", "ProductSetup"))
                    )
                )

            </text>);

    })
)
